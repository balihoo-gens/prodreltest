{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template created from sample for Fulfillment. see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/example-templates-sqs.html",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.large", "m1.xlarge" ],
      "ConstraintDescription" : "EC2 Instance: t2.micro through m1.xlarge"
    },

    "MinInstances" : {
      "Description" : "The minimum number of Workers",
      "Type" : "Number",
      "MinValue" : "1",
      "Default"  : "1",
      "ConstraintDescription" : "Enter a number >0"
    },

    "MaxInstances" : {
      "Description" : "The maximum number of Workers",
      "Type" : "Number",
      "MinValue" : "1",
      "Default"  : "1",
      "ConstraintDescription" : "Enter a number >1"
    },

    "AWSAccessKey" : {
      "Description" : "The AWS Access key to download the app from S3",
      "Type" : "String"
    },

    "AWSSecretKey" : {
      "Description" : "The AWS Secret key to download the app from S3",
      "Type" : "String"
    },

    "FFAppTarBall" : {
      "Description" : "name of the fulfillment app tarball in s3",
      "Type" : "String",
      "Default" : "fulfillment-1404748376.tar.gz"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "t2.micro"    : { "Arch" : "64" },
      "t2.small"    : { "Arch" : "64" },
      "t2.medium"   : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-west-1"      : { "32" : "ami-951945d0", "64" : "ami-971945d2" },
      "us-east-1"      : { "32" : "ami-31814f58", "64" : "ami-1b814f72", "64HVM" : "ami-0da96764" },
      "us-west-2"      : { "32" : "ami-16fd7026", "64" : "ami-10fd7020" }
    }
  },

  "Resources" : {

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access",
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" } ]
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [
          "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
          "Arch" ] } ] },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "echo running user data script > /tmp/bootstrap.log\n",
          "BOOTSTRAPFILE=/tmp/bootstrap.sh\n",
          "echo creating bootstrap file ${BOOTSTRAPFILE} >> /tmp/bootstrap.log\n",
          "echo -e \"",
            "#!/bin/bash\n",
            "APPFILE=", { "Ref" : "FFAppTarBall" }, "\n",
            "LOGFILE=/tmp/fulfillment_log.txt\n",
            "echo alive > \\${LOGFILE}\n",
            "echo PWD \\$(pwd) >> \\${LOGFILE}\n",
            "echo test if >> \\${LOGFILE}\n",
            "if [ -f \\${LOGFILE} ]\n",
            "then\n",
            "  echo OK >> \\${LOGFILE}\n",
            "else\n",
            "  echo FAIL >> \\${LOGFILE}\n",
            "fi\n",
            "export AWS_ACCESS_KEY_ID=", { "Ref" : "AWSAccessKey" }, "\n",
            "export AWS_SECRET_ACCESS_KEY=", { "Ref" : "AWSSecretKey" }, "\n",
            "echo set aws keys: >> \\${LOGFILE}\n",
            "echo AWS_ACCESS_KEY_ID \\$AWS_ACCESS_KEY_ID >> \\${LOGFILE}\n",
            "echo AWS_SECRET_ACCESS_KEY \\$AWS_SECRET_ACCESS_KEY >> \\${LOGFILE}\n",
            "wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip >> \\${LOGFILE} 2>&1\n",
            "echo downloaded bundle >> \\${LOGFILE}\n",
            "unzip awscli-bundle.zip >> \\${LOGFILE} 2>&1\n",
            "echo unzipped bundle >> \\${LOGFILE}\n",
            "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws >> \\${LOGFILE} 2>&1\n",
            "echo installed bundle >> \\${LOGFILE}\n",
            "if [ -x /usr/local/bin/aws ]\n",
            "then\n",
            "  echo aws exists: >> \\${LOGFILE}\n",
            "  /usr/local/bin/aws --version >> \\${LOGFILE} 2>&1\n",
            "  cd /tmp\n",
            "  echo moved to PWD \\$(pwd) >> \\${LOGFILE}\n",
            "  echo downloading app \\${APPFILE}... >> \\${LOGFILE}\n",
            "  /usr/local/bin/aws s3 cp s3://balihoo.dev.fulfillment/\\${APPFILE} . >> \\${LOGFILE} 2>&1\n",
            "  if [ -f \\${APPFILE} ]\n",
            "  then\n",
            "    echo downloaded ff app >> \\${LOGFILE}\n",
            "    tar xvzf \\${APPFILE} >> \\${LOGFILE} 2>&1\n",
            "    echo extracted app tarball >> \\${LOGFILE}\n",
            "    if [ -d installtmp ]\n",
            "    then\n",
            "      mkdir -p /opt/balihoo\n",
            "      echo created opt dir >> \\${LOGFILE}\n",
            "      mv installtmp /opt/balihoo/fulfillment\n",
            "      if [ -d /opt/balihoo/fulfillment ]\n",
            "      then\n",
            "        echo moved app >> \\${LOGFILE}\n",
            "        mkdir /opt/balihoo/fulfillment/logs\n",
            "        if [ -d /opt/balihoo/fulfillment/logs ]\n",
            "        then\n",
            "          echo created logs dir >> \\${LOGFILE}\n",
            "          nohup /opt/balihoo/fulfillment/launch_fulfillment > /opt/balihoo/fulfillment/logs/launch 2>&1 &\n",
            "          PID=\\$!\n",
            "          #this kill does not kill, just tests the pid\n",
            "          if \\$(kill -s 0 \\$PID)\n",
            "          then\n",
            "            echo started app with PID \\$PID >> \\${LOGFILE}\n",
            "          else\n",
            "            echo ERROR failed to start app >> \\${LOGFILE}\n",
            "          fi\n",
            "        else\n",
            "          echo ERROR failed to mkdir /opt/balihoo/fulfillment/logs >> \\${LOGFILE}\n",
            "        fi\n",
            "      else\n",
            "        echo ERROR /opt/balihoo/fulfillment does not exist >> \\${LOGFILE}\n",
            "      fi\n",
            "    else\n",
            "      echo ERROR failed to extract app tarball >> \\${LOGFILE}\n",
            "    fi\n",
            "  else\n",
            "    echo ERROR failed to download app tarball >> \\${LOGFILE}\n",
            "  fi\n",
            "else\n",
            "  echo ERROR aws executable not present >> \\${LOGFILE}\n",
            "fi\n",
            "echo done >> \\${LOGFILE}\n",
          "\" > ${BOOTSTRAPFILE}\n",
          "echo sourcing bootstrap file >> /tmp/bootstrap.log\n",
          "source ${BOOTSTRAPFILE} >> /tmp/bootstrap.log 2>&1\n",
          "echo done >> /tmp/bootstrap.log\n"
        ]]}}
      }
    },

    "WorkerAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : { "Ref" : "MinInstances" },
        "MaxSize" : { "Ref" : "MaxInstances" }
      }
    },

    "WorkerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WorkerAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },

    "WorkerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WorkerAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU is greater than 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WorkerScaleUpPolicy" } ],
        "Dimensions": [
           {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WorkerAutoScalingGroup" }
           }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU is less than 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WorkerScaleDownPolicy" } ],
        "Dimensions": [
           {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WorkerAutoScalingGroup" }
           }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    }
  }
}
