{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Autoscaling Fulfillment Stack for SWF workers and decider",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "WorkerInstanceType" : {
      "Description" : "Worker EC2 instance type",
      "Type" : "String",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.medium", "m1.small", "m1.large", "m1.xlarge" ],
      "ConstraintDescription" : "EC2 Instance: t2.micro through m1.xlarge"
    },

    "DashboardInstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.medium", "m1.small", "m1.large", "m1.xlarge" ],
      "ConstraintDescription" : "EC2 Instance: t2.micro through m1.xlarge"
    },

    "MinInstances" : {
      "Description" : "The minimum number of Workers",
      "Type" : "Number",
      "MinValue" : "1",
      "ConstraintDescription" : "Enter a number >0"
    },

    "MaxInstances" : {
      "Description" : "The maximum number of Workers",
      "Type" : "Number",
      "MinValue" : "1",
      "ConstraintDescription" : "Enter a number >0"
    },

    "WebPort" : {
      "Description" : "The port of the dashboard",
      "Type" : "Number",
      "MinValue" : "1",
      "MaxValue" : "65535",
      "ConstraintDescription" : "Enter a number between 0 and 65535"
    },

    "WorkerScript" : {
      "Description" : "The bootstrap script for the worker instance(s)",
      "Type" : "String"
    },

    "DashboardScript" : {
      "Description" : "The bootstrap script for the dashboard instance",
      "Type" : "String"
    },

    "AccessIPMask" : {
      "Description" : "The IP mask for ssh and http access",
      "Type" : "String"
    },

    "LinuxDistro" : {
      "Description" : "The linux distribution to use",
      "Type" : "String",
      "AllowedValues" : [ "Ubuntu", "Amazon" ]
    },

    "Environment" : {
      "Description" : "The environment for the instances: dev, stage, prod, demo, david. Use this to separate this deployment from another in the same region",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "t2.micro"    : { "Arch" : "64" },
      "t2.small"    : { "Arch" : "64" },
      "t2.medium"   : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegion2AMI" : {
      "us-east-1"      : { "Amazon" : "ami-7c807d14", "Ubuntu" : "ami-d2ff23ba" },
      "us-west-1"      : { "Amazon" : "ami-a8d3d4ed", "Ubuntu" : "ami-73717d36" },
      "us-west-2"      : { "Amazon" : "ami-1b3b462b", "Ubuntu" : "ami-f1ce8bc1" }
    }

  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "RouteTableId" : { "Ref" : "RouteTable" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },









    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access",
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AccessIPMask" } } ]
      }
    },

    "WorkerLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, { "Ref" : "LinuxDistro" } ] },
        "SecurityGroups" : [
          { "Ref" : "InstanceSecurityGroup" },
          "splunk-access"
        ],
        "InstanceType" : { "Ref" : "WorkerInstanceType" },
        "UserData": { "Fn::Base64" : { "Ref" : "WorkerScript" } }
      }
    },

    "WorkerAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "WorkerLaunchConfig" },
        "MinSize" : { "Ref" : "MinInstances" },
        "MaxSize" : { "Ref" : "MaxInstances" },
        "Tags" : [ {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ "balihoo-fulfillment-app", { "Ref" : "Environment" } ] ] },
            "PropagateAtLaunch" : "true"
        } ]
      }
    },

    "WorkerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WorkerAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },

    "WorkerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WorkerAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU is greater than 90% for 30 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "6",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WorkerScaleUpPolicy" } ],
        "Dimensions": [
           {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WorkerAutoScalingGroup" }
           }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU is less than 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WorkerScaleDownPolicy" } ],
        "Dimensions": [
           {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WorkerAutoScalingGroup" }
           }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },



    "DashboardLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, { "Ref" : "LinuxDistro" } ] },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [
          { "Ref" : "DashboardSecurityGroup" },
          { "Ref" : "InstanceSecurityGroup" },
          "splunk-access"
        ],
        "InstanceType" : { "Ref" : "DashboardInstanceType" },
        "UserData": { "Fn::Base64" : { "Ref" : "DashboardScript" } }
      }
    },

    "DashboardAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "DashboardLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "Tags" : [ {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ "balihoo-fulfillment-web", { "Ref" : "Environment" } ] ] },
            "PropagateAtLaunch" : "true"
        } ]
      }
    },

    "DashboardSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : { "Ref": "WebPort" }, "ToPort" : { "Ref": "WebPort" }, "CidrIp" : { "Ref" : "AccessIPMask" } }
        ]
      }
    }
  }
}
